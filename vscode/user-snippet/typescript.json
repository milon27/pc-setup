{
	// https://snippet-generator.app/
	// Place your snippets for typescript here. Each snippet is defined under a snippet name and has a prefix, body and 
	// description. The prefix is what is used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. Placeholders with the 
	// same ids are connected.
	// Example:
	// "Print to console": {
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"
	// 	],
	// 	"description": "Log output to console" // "$1 ${1/(.*)/${1:/upcase}/}  ->  ${1/(.*)/${1:/downcase}/}  ->  ${1/(.*)/${1:/capitalize}/}"
	// }
	"Test": {
		"prefix": "test",
		"body": [
			"$1 ->  ${1/(.*)/${1:/capitalize}/}"
		],
		"description": "test output to console"
	},
	"Express Router": {
		"prefix": "eRouter",
		"body": [
			"import { Router } from \"express\";",
			"import $1Controller from \"../controllers/$1Controller\";",
			"",
			"const $1Router = Router()",
			"",
			"/**",
			" * @description get all ${1/(.*)/${1:/downcase}/} with paginate",
			" * @get http://localhost:2727/${1/(.*)/${1:/downcase}/}/",
			" */",
			"$1Router.get('/', $1Controller.getAllByPaginate)",
			"",
			"/**",
			" * @description create a new ${1/(.*)/${1:/downcase}/}",
			" * @post http://localhost:2727/${1/(.*)/${1:/downcase}/}/",
			" */",
			"$1Router.post('/', $1Controller.create$1)",
			"",
			"/**",
			" * @description update a ${1/(.*)/${1:/downcase}/}",
			" * @put http://localhost:2727/${1/(.*)/${1:/downcase}/}/:id",
			" */",
			"$1Router.put('/:id', $1Controller.update$1)",
			"",
			"/**",
			" * @description delete a ${1/(.*)/${1:/downcase}/}",
			" * @delete http://localhost:2727/${1/(.*)/${1:/downcase}/}/:id",
			" */",
			"$1Router.delete('/:id', $1Controller.delete$1)",
			"",
			"",
			"export default $1Router"
		],
		"description": "Express Router"
	},
	"Express Controller": {
		"prefix": "eCon",
		"body": [
			"import { Request, Response } from \"express\"",
			"",
			"const $1Controller = {",
			"    getAllByPaginate: async (req: Request, res: Response) => {",
			"",
			"    },",
			"    create$1: async (req: Request, res: Response) => {",
			"",
			"    },",
			"    update$1: async (req: Request, res: Response) => {",
			"",
			"    },",
			"    delete$1: async (req: Request, res: Response) => {",
			"",
			"    },",
			"}",
			"export default $1Controller"
		],
		"description": "Express Controller"
	},
}
